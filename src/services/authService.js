import crypto from 'crypto';
import User from '../models/User.js';

class AuthService {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
    generateSessionKey() {
        return crypto.randomBytes(32).toString('hex');
    }

    // –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async login(walletAddress, clientIp) {
        console.log('üîê Login attempt:', walletAddress.slice(0, 8) + '...', 'from IP:', clientIp);

        let user = await User.findOne({
            where: { sol_wallet: walletAddress }
        });

        const newSessionKey = this.generateSessionKey();

        if (!user) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await User.create({
                sol_wallet: walletAddress,
                session_key: newSessionKey,
                last_ip: clientIp
            });
            console.log('‚úÖ New user created');
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º IP
            if (user.last_ip !== clientIp) {
                console.log('üîÑ Different IP detected, generating new session');
                // –ù–æ–≤—ã–π IP - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
                await user.update({
                    session_key: newSessionKey,
                    last_ip: clientIp
                });
            } else {
                console.log('‚úÖ Same IP, existing session');
                // –¢–æ—Ç –∂–µ IP - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
                return {
                    success: true,
                    sessionKey: user.session_key,
                    isNewSession: false
                };
            }
        }

        return {
            success: true,
            sessionKey: newSessionKey,
            isNewSession: true
        };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    async validateSession(walletAddress, sessionKey, clientIp) {
        console.log('üîç Validating session for:', walletAddress.slice(0, 8) + '...');

        const user = await User.findOne({
            where: {
                sol_wallet: walletAddress,
                session_key: sessionKey
            }
        });

        if (!user) {
            console.log('‚ùå Session invalid');
            return { success: false };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º IP
        if (user.last_ip !== clientIp) {
            console.log('‚ùå IP changed, session invalid');
            return { success: false };
        }

        console.log('‚úÖ Session valid');
        return { success: true };
    }

    // –õ–æ–≥–∞—É—Ç (–æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏)
    async logout(walletAddress) {
        await User.update(
            { session_key: null },
            { where: { sol_wallet: walletAddress } }
        );
        console.log('üö™ User logged out');
        return { success: true };
    }
}

export default new AuthService();